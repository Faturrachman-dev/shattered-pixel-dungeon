---
description: Comprehensive reflection for Level 4 (Complex System) tasks. Guides AI to create an extensive reflection document in `memory-bank/reflection/` using `edit_file`.
globs: **/Level4/reflection-comprehensive.mdc
alwaysApply: false
---
# COMPREHENSIVE REFLECTION FOR LEVEL 4 TASKS (AI Instructions)

> **TL;DR:** This rule structures the comprehensive reflection process for a completed Level 4 (Complex System) task. Use `edit_file` to create an extensive `memory-bank/reflection/reflect-[system_name_or_id]-[date].md` document, analyzing all aspects of the project lifecycle.

This rule is typically fetched by the REFLECT mode orchestrator if the task is L4.

## ⚙️ AI ACTIONS FOR LEVEL 4 COMPREHENSIVE REFLECTION:

1.  **Acknowledge & Extensive Context Gathering:**
    a.  State: "Initiating Comprehensive Reflection for Level 4 system: [System Name from activeContext.md]."
    b.  `read_file memory-bank/tasks.md` (for the entire L4 task history, architectural plans, links to creative docs, phased implementation details).
    c.  `read_file memory-bank/progress.md` (for the full development log, challenges, decisions).
    d.  `read_file` all relevant `memory-bank/architecture/`, `memory-bank/creative/` documents.
    e.  `read_file memory-bank/projectbrief.md`, `productContext.md`, `systemPatterns.md`, `techContext.md`.
    f.  `read_file memory-bank/activeContext.md` to confirm implementation is marked complete.
2.  **Prepare Reflection Content (Based on Detailed Template Below):**
    a.  Synthesize information from all gathered documents. Analyze each phase of the L4 workflow (VAN, Plan (Arch), Creative, Phased Implement).
3.  **Create Reflection File:**
    a.  Determine reflection filename: `reflect-[system_name_or_id]-[date].md`.
    b.  Use `edit_file` to create/update `memory-bank/reflection/[reflection_filename.md]` with the structured content.
        **L4 Comprehensive Reflection Structure (Content for `edit_file`):**
        ```markdown
        # System Reflection: [System Name from tasks.md]

        ## System ID: [System ID from tasks.md]
        ## Date of Reflection: [Current Date]
        ## Complexity Level: 4

        ## 1. System Overview & Final State
        - **Original Purpose & Scope:** [From `projectbrief.md` / initial `tasks.md`]
        - **Achieved Functionality:** [Describe the final state of the system and its key features.]
        - **Alignment with Business Objectives:** [How well did the final system meet the business goals?]

        ## 2. Project Performance Analysis
        - **Timeline Performance:**
          - Planned vs. Actual Duration (Overall and per phase): [Details]
          - Reasons for major variances: [Analysis]
        - **Resource Utilization (if tracked):** [Planned vs. Actual]
        - **Quality Metrics (if defined):** [How did the project fare against quality targets? E.g., bug density, test coverage achieved.]
        - **Risk Management Effectiveness:** [Were identified risks managed well? Any unforeseen major risks?]

        ## 3. Architectural Planning & Design Phase Review
        - **Effectiveness of Architectural Plan:** [Review `Level4/architectural-planning.mdc` outputs. Were decisions sound? Did the architecture scale/perform as expected?]
        - **Creative Phase Outcomes:** [Review key `creative-*.md` documents. How well did designs translate to implementation? Any design flaws discovered late?]
        - **Adherence to Architectural Principles & Patterns:** [From `systemPatterns.md` and arch plan.]

        ## 4. Phased Implementation Review (`Level4/phased-implementation.mdc`)
        - **Foundation Phase:** [Successes, challenges]
        - **Core Phase:** [Successes, challenges]
        - **Extension Phase(s):** [Successes, challenges]
        - **Integration Phase:** [Successes, challenges, integration issues]
        - **Finalization Phase:** [Successes, challenges]
        - **Overall Implementation Challenges & Solutions:** [Major hurdles and how they were overcome.]

        ## 5. Testing & Quality Assurance Review
        - **Effectiveness of Testing Strategy:** [Unit, integration, system, UAT. Were tests comprehensive? Did they catch critical issues?]
        - **Test Automation:** [Successes, challenges with test automation.]
        - **Post-Release Defect Rate (if applicable/known):**

        ## 6. Achievements and Successes (Overall Project)
        [List 3-5 significant achievements or successes beyond just feature completion.]
        - Achievement 1: [e.g., Successful integration of a complex new technology.]
        - Achievement 2: [e.g., High team collaboration leading to rapid problem-solving.]

        ## 7. Major Challenges & How They Were Addressed (Overall Project)
        [List 3-5 major challenges encountered throughout the project and their resolutions.]
        - Challenge 1: [e.g., Unexpected performance bottlenecks in Service X.]
          - Resolution: [e.g., Re-architected data flow and implemented caching.]

        ## 8. Key Lessons Learned
        ### 8.1. Technical Lessons
        [Deep technical insights, e.g., "Using GraphQL for this specific data aggregation pattern proved highly effective because..."]
        ### 8.2. Architectural Lessons
        [e.g., "The decision to use event sourcing for X module added complexity but significantly improved auditability..."]
        ### 8.3. Process & Workflow Lessons (CMB Usage)
        [e.g., "The phased implementation approach for L4 was crucial for managing complexity. More detailed upfront planning for inter-service contracts would have been beneficial."]
        ### 8.4. Team & Collaboration Lessons
        [e.g., "Regular cross-functional syncs for API design were vital."]

        ## 9. Strategic Actions & Recommendations
        ### 9.1. For This System (Maintenance, Future Enhancements)
        [e.g., "Recommend refactoring Module Y for better testability in Q3."]
        ### 9.2. For Future L4 Projects (Process, Tools, Architecture)
        [e.g., "Adopt a more formal ADR process for all L4 architectural decisions."]
        [e.g., "Invest in better performance testing tools earlier in the lifecycle."]

        ## 10. Knowledge Transfer Summary
        - Key areas of knowledge to transfer: [e.g., Service Z's deployment intricacies, Data model for Module A.]
        - Suggested methods for transfer: [e.g., Update `documentation/`, conduct team workshops.]

        ## 11. Final Assessment
        [Overall summary of the project's execution, outcomes, and strategic value.]
        ```
4.  **Update Core Memory Bank Files (using `edit_file`):**
    a.  **`tasks.md`:**
        *   Mark the Level 4 system's REFLECT phase as "COMPLETE".
        *   Add a link to the reflection document: `Reflection: ../reflection/[reflection_filename.md]`.
    b.  **`activeContext.md`:**
        *   Update current focus: "Comprehensive reflection complete for L4 system [System Name]. Ready for ARCHIVE."
        *   Add to log: "Completed comprehensive reflection for L4 system [System Name]. Document at `reflection/[reflection_filename.md]`."
5.  **Completion:**
    a.  State: "Comprehensive reflection for Level 4 system [System Name] complete. Reflection document created at `memory-bank/reflection/[reflection_filename.md]`."
    b.  (Control returns to the fetching rule).